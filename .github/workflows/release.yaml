name: PyPI release
on:
  push:
    tags:
    # Trigger on version tags (e.g., v1.0.0)
      - "v*.*.*"

env:
  # package name
  PYPI_NAME: qc-selector

jobs:
  build:
    name: Build and Test Distribution
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build pytest pytest-cov codecov
          python -m pip install -r requirements.txt
          python -m pip install -r requirements_dev.txt
      - name: Test package
        run: |
          python -m pytest -c pyproject.toml --cov-config=.coveragerc --cov-report=xml --color=yes selector
      - name: Build package
        run: python -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to upload.
          name: ${{ matrix.os }}-python${{ matrix.python-version }}
          # A file, directory or wildcard pattern that describes what to upload
          path: dist/

          # The level of compression for Zlib to be applied to the artifact archive.
          # The value can range from 0 to 9.
          # For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads. Default is '6'
          compression-level: 6

          # If true, an artifact with a matching name will be deleted before a new one is     uploaded.
          # If false, the action will fail if an artifact for the given name already exists.
          # Does not fail if the artifact does not exist.
          # Optional. Default is 'false'
          # overwrite: true
           overwrite: false

          # Whether to include hidden files in the provided path in the artifact
          # The file contents of any hidden files in the path should be validated before
          # enabled this to avoid uploading sensitive information.
          # Optional. Default is 'false'
          include-hidden-files: false

      - name: publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  # publish-to-testpypi:
  publish-to-pypi:
    name: Publish Python distribution to TestPyPI
    # Only publish on version tag pushes
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/${{ env.PYPI_NAME }}
    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}-python${{ matrix.python-version }}
          path: dist/
      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}

  github-release:
    name: >-
      Sign the Python distribution with Sigstore
      and upload them to GitHub Release
    needs:
    - publish-to-testpypi
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}-python${{ matrix.python-version }}
          path: dist/
      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v2.1.1
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >
          gh release create
          '${{ github.ref_name }}'
          --repo '${{ github.repository }}'
          --notes ""
      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: >
          gh release upload
          '${{ github.ref_name }}' dist/**
          --repo '${{ github.repository }}'

  publish-none-pypi:
    name: Publish Python distribution to TestPyPI (none)
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/${{ env.PYPI_NAME }}
    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.os }}-python${{ matrix.python-version }}
          path: dist/
      - name: Publish distribution with relaxed constraints
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
        env:
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
